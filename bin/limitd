#!/usr/bin/env node

process.title = 'limitd server';

const program  = require('commander');
const fs       = require('fs');
const _        = require('lodash');
const getLogger  = require('../lib/logger');
const profiler = require('v8-profiler-node8');
const agent = require('auth0-instrumentation');
const configEnvParser = require('../conf/parser/env');
const configFileParser = require('../conf/parser/file');

const LimitdServer = require('../server');

program.version(require('../package').version)
  .option('-d --db <file>', 'Path to the database.')
  .option('-p --port [9231]', 'Port to bind [9231].', '9231')
  .option('-h --hostname [0.0.0.0]', 'Hostname to bind [0.0.0.0].', '0.0.0.0')
  .option('-c --config-file <file>', 'Configuration file.')
  .option('--avro', 'Use the avro protocol.')
  .option('--profile')
  .parse(process.argv);


const config = _.pick(program, ['db', 'port', 'hostname', 'configFile']);

if (config.configFile) {
  try {
    const parsedFromFile = configFileParser.parse(config.configFile);
    _.extend(config, parsedFromFile);
  } catch (e) {
    console.error('Error parsing configuration from file\n', e.stack);
    setTimeout(function () {
      process.exit(1);
    }, 500);
  }
}

try{
  const parsedFromEnv = configEnvParser.parse(process.env);
  _.extend(config, parsedFromEnv);
} catch (e) {
  console.error('Error parsing environment configuration\n', e.stack);
  setTimeout(function () {
    process.exit(2);
  }, 500);
}

const logger = getLogger(config.log_level);

if (typeof config.db === 'undefined') {
  console.error('missing database path');
  return process.exit(1);
}

agent.init({
  'name': 'limitd'
}, {
  'COLLECT_RESOURCE_USAGE': true,
  'STATSD_HOST': process.env.STATSD_HOST || config.statsd_host,
  'ERROR_REPORTER_URL': process.env.ERROR_REPORTER_URL || config.error_reporter_url
});

agent.metrics.startResourceCollection();

config.metrics = agent.metrics;

const server = new LimitdServer(config);

server.start();

if (program.profile) {
  profiler.startProfiling('1', true);
}

function finish () {
  if (program.profile) {
    const profile1 = profiler.stopProfiling();
    return profile1.export(function(error, result) {
      fs.writeFileSync(`${process.cwd()}/profile-${Date.now()}.cpuprofile`, result);
      profile1.delete();
      process.exit(0);
    });
  }

  server.stop((err) => {
    process.exit(err ? 1 : 0);
  });
}

process
  .on('SIGTERM', finish)
  .on('SIGINT', finish);
